const http = require('http');const app = require('./src/app');const config = require('./config');const utils = require('./src/utils');const dbService = require('./src/services/database');const {    logger,    gracefulShutdown} = utils;let server;const shutdown = () => {    // in case if server running => gracefulShutdown    if (server && server.shutdown) {        server.shutdown();    } else {        // in other case => stop process        // eslint-disable-next-line no-process-exit        process.exit(1);    }};// subscribe to process unhandledRejection, uncaughtException events// Catch unhandled rejections globallyprocess.on('unhandledRejection', (reason, promise) => {    logger.error('Unhandled Rejection at: Promise ', promise, ' reason: ', reason);shutdown();});process.on('uncaughtException', ex => {    logger.error('Unhandled Exception:', ex);shutdown();});process.once('SIGTERM', () => {    logger.info('Received SIGTERM. Graceful shutdown start', new Date().toISOString());shutdown();});process.once('SIGINT', () => {    logger.info('Received SIGINT. Graceful shutdown start', new Date().toISOString());shutdown();});// initialize databasedbService.initialize(config.database)    .then(response => {        logger.info(response);    })    .catch(error => {        logger.error(error);    });// create server (replace by https in case of SSL certs)server = http.createServer(app);server.listen(config.port, err => {    if (err) {        logger.error(err);        throw err;    }    console.log("==========================================================================================");    console.log(`|| [${new Date().toISOString()}]: Server started at port ${config.port} in "${config.env}" environment ||`);    console.log("==========================================================================================\n");});gracefulShutdown(server);module.exports = server;